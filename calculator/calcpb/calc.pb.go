// Code generated by protoc-gen-go. DO NOT EDIT.
// source: calculator/calcpb/calc.proto

package calcpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SumRequest struct {
	IntOne               int32    `protobuf:"varint,1,opt,name=int_one,json=intOne,proto3" json:"int_one,omitempty"`
	IntTwo               int32    `protobuf:"varint,2,opt,name=int_two,json=intTwo,proto3" json:"int_two,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumRequest) Reset()         { *m = SumRequest{} }
func (m *SumRequest) String() string { return proto.CompactTextString(m) }
func (*SumRequest) ProtoMessage()    {}
func (*SumRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_5e94874524a108e6, []int{0}
}
func (m *SumRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumRequest.Unmarshal(m, b)
}
func (m *SumRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumRequest.Marshal(b, m, deterministic)
}
func (dst *SumRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumRequest.Merge(dst, src)
}
func (m *SumRequest) XXX_Size() int {
	return xxx_messageInfo_SumRequest.Size(m)
}
func (m *SumRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SumRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SumRequest proto.InternalMessageInfo

func (m *SumRequest) GetIntOne() int32 {
	if m != nil {
		return m.IntOne
	}
	return 0
}

func (m *SumRequest) GetIntTwo() int32 {
	if m != nil {
		return m.IntTwo
	}
	return 0
}

type SumResponse struct {
	Result               int32    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SumResponse) Reset()         { *m = SumResponse{} }
func (m *SumResponse) String() string { return proto.CompactTextString(m) }
func (*SumResponse) ProtoMessage()    {}
func (*SumResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_calc_5e94874524a108e6, []int{1}
}
func (m *SumResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SumResponse.Unmarshal(m, b)
}
func (m *SumResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SumResponse.Marshal(b, m, deterministic)
}
func (dst *SumResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SumResponse.Merge(dst, src)
}
func (m *SumResponse) XXX_Size() int {
	return xxx_messageInfo_SumResponse.Size(m)
}
func (m *SumResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SumResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SumResponse proto.InternalMessageInfo

func (m *SumResponse) GetResult() int32 {
	if m != nil {
		return m.Result
	}
	return 0
}

func init() {
	proto.RegisterType((*SumRequest)(nil), "calc.SumRequest")
	proto.RegisterType((*SumResponse)(nil), "calc.SumResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SumServceClient is the client API for SumServce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SumServceClient interface {
	// Unary
	Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error)
}

type sumServceClient struct {
	cc *grpc.ClientConn
}

func NewSumServceClient(cc *grpc.ClientConn) SumServceClient {
	return &sumServceClient{cc}
}

func (c *sumServceClient) Sum(ctx context.Context, in *SumRequest, opts ...grpc.CallOption) (*SumResponse, error) {
	out := new(SumResponse)
	err := c.cc.Invoke(ctx, "/calc.SumServce/Sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SumServceServer is the server API for SumServce service.
type SumServceServer interface {
	// Unary
	Sum(context.Context, *SumRequest) (*SumResponse, error)
}

func RegisterSumServceServer(s *grpc.Server, srv SumServceServer) {
	s.RegisterService(&_SumServce_serviceDesc, srv)
}

func _SumServce_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SumServceServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calc.SumServce/Sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SumServceServer).Sum(ctx, req.(*SumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SumServce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "calc.SumServce",
	HandlerType: (*SumServceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sum",
			Handler:    _SumServce_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "calculator/calcpb/calc.proto",
}

func init() { proto.RegisterFile("calculator/calcpb/calc.proto", fileDescriptor_calc_5e94874524a108e6) }

var fileDescriptor_calc_5e94874524a108e6 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x49, 0x4e, 0xcc, 0x49,
	0x2e, 0xcd, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x07, 0x31, 0x0b, 0x92, 0xc0, 0x94, 0x5e, 0x41, 0x51,
	0x7e, 0x49, 0xbe, 0x10, 0x0b, 0x88, 0xad, 0x64, 0xc7, 0xc5, 0x15, 0x5c, 0x9a, 0x1b, 0x94, 0x5a,
	0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xce, 0xc5, 0x9e, 0x99, 0x57, 0x12, 0x9f, 0x9f, 0x97, 0x2a,
	0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1a, 0xc4, 0x96, 0x99, 0x57, 0xe2, 0x9f, 0x97, 0x0a, 0x93, 0x28,
	0x29, 0xcf, 0x97, 0x60, 0x82, 0x4b, 0x84, 0x94, 0xe7, 0x2b, 0xa9, 0x72, 0x71, 0x83, 0xf5, 0x17,
	0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x89, 0x71, 0xb1, 0x15, 0xa5, 0x16, 0x97, 0xe6, 0x94, 0xc0,
	0xf4, 0x43, 0x78, 0x46, 0x96, 0x5c, 0x9c, 0xc1, 0xa5, 0xb9, 0xc1, 0xa9, 0x45, 0x65, 0xc9, 0xa9,
	0x42, 0x3a, 0x5c, 0xcc, 0xc1, 0xa5, 0xb9, 0x42, 0x02, 0x7a, 0x60, 0xd7, 0x20, 0xac, 0x97, 0x12,
	0x44, 0x12, 0x81, 0x18, 0xa8, 0xc4, 0xe0, 0xc4, 0x11, 0xc5, 0x06, 0x71, 0x7c, 0x12, 0x1b, 0xd8,
	0xe1, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x9e, 0x12, 0x50, 0xd8, 0x00, 0x00, 0x00,
}
